// <auto-generated />
using System;
using MainBoilerPlate.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MainBoilerPlate.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20251017143618_roles-navigations")]
    partial class rolesnavigations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CursusXCategories", b =>
                {
                    b.Property<Guid>("CategorieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CursusId")
                        .HasColumnType("uuid");

                    b.HasKey("CategorieId", "CursusId");

                    b.HasIndex("CursusId");

                    b.ToTable("CursusXCategories");
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SlotId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("MainBoilerPlate.Models.CategoryCursus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Icon")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CategoryCursuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a5eaf2f-0496-4035-a4b7-9210da39501c"),
                            Color = "#ff69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9549),
                            Icon = "",
                            Name = "Soft skills"
                        },
                        new
                        {
                            Id = new Guid("bde5556b-562d-431f-9ff9-d31a5f5cb8c5"),
                            Color = "#fa69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9552),
                            Icon = "",
                            Name = "Technics"
                        },
                        new
                        {
                            Id = new Guid("87a0a5ed-c7bb-4394-a163-7ed7560b3703"),
                            Color = "#ab69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9554),
                            Icon = "",
                            Name = "Front-end"
                        },
                        new
                        {
                            Id = new Guid("41f1f997-c392-4aac-bef0-fc8acaf109ec"),
                            Color = "#ab69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9560),
                            Icon = "",
                            Name = "Back-end"
                        });
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Cursus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Icon")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Cursuses", (string)null);
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Experiences", (string)null);
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Formation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Formations", (string)null);
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Icon")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Genders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a5eaf2f-0496-4035-a4b7-9210da39501c"),
                            Color = "#ff69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9405),
                            Icon = "",
                            Name = "Female"
                        },
                        new
                        {
                            Id = new Guid("bde5556b-562d-431f-9ff9-d31a5f5cb8c5"),
                            Color = "#fa69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9409),
                            Icon = "",
                            Name = "Male"
                        },
                        new
                        {
                            Id = new Guid("87a0a5ed-c7bb-4394-a163-7ed7560b3703"),
                            Color = "#ab69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9412),
                            Icon = "",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Icon")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Languages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bde5556b-562d-431f-9ff9-d31a5f5cb8c5"),
                            Color = "#ff69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9602),
                            Icon = "",
                            Name = "French"
                        },
                        new
                        {
                            Id = new Guid("4a5eaf2f-0496-4035-a4b7-9210da39501c"),
                            Color = "#fa69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9606),
                            Icon = "",
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("87a0a5ed-c7bb-4394-a163-7ed7560b3703"),
                            Color = "#ab69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9608),
                            Icon = "",
                            Name = "Arab"
                        },
                        new
                        {
                            Id = new Guid("41f1f997-c392-4aac-bef0-fc8acaf109ec"),
                            Color = "#ab69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9611),
                            Icon = "",
                            Name = "Spanich"
                        });
                });

            modelBuilder.Entity("MainBoilerPlate.Models.LevelCursus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Icon")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LevelCursuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bde5556b-562d-431f-9ff9-d31a5f5cb8c5"),
                            Color = "#ff69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9506),
                            Icon = "",
                            Name = "Beginner"
                        },
                        new
                        {
                            Id = new Guid("4a5eaf2f-0496-4035-a4b7-9210da39501c"),
                            Color = "#fa69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9509),
                            Icon = "",
                            Name = "Intermediate"
                        },
                        new
                        {
                            Id = new Guid("87a0a5ed-c7bb-4394-a163-7ed7560b3703"),
                            Color = "#ab69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9512),
                            Icon = "",
                            Name = "Advanced"
                        });
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("text");

                    b.Property<decimal>("ReductionAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("ReductionPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("MainBoilerPlate.Models.ProgrammingLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Icon")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProgrammingLanguages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bde5556b-562d-431f-9ff9-d31a5f5cb8c5"),
                            Color = "#ff69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9647),
                            Icon = "",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("4a5eaf2f-0496-4035-a4b7-9210da39501c"),
                            Color = "#fa69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9650),
                            Icon = "",
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("87a0a5ed-c7bb-4394-a163-7ed7560b3703"),
                            Color = "#ab69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9652),
                            Icon = "",
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("41f1f997-c392-4aac-bef0-fc8acaf109ec"),
                            Color = "#ab69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9655),
                            Icon = "",
                            Name = "C++"
                        });
                });

            modelBuilder.Entity("MainBoilerPlate.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("MainBoilerPlate.Models.RoleApp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bde5556b-562d-431f-9ff9-d31a5f5cb8c5"),
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9238),
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("4a5eaf2f-0496-4035-a4b7-9210da39501c"),
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9252),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("87a0a5ed-c7bb-4394-a163-7ed7560b3703"),
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9255),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("87a0a5ed-c7bb-4394-a163-7ed7560b4a01"),
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9257),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TypeId");

                    b.ToTable("Slots", (string)null);
                });

            modelBuilder.Entity("MainBoilerPlate.Models.StatusAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Icon")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bde5556b-562d-431f-9ff9-d31a5f5cb8c5"),
                            Color = "#ff69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9461),
                            Icon = "",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("4a5eaf2f-0496-4035-a4b7-9210da39501c"),
                            Color = "#fa69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9465),
                            Icon = "",
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = new Guid("87a0a5ed-c7bb-4394-a163-7ed7560b3703"),
                            Color = "#ab69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9468),
                            Icon = "",
                            Name = "Banned"
                        });
                });

            modelBuilder.Entity("MainBoilerPlate.Models.TypeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Icon")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TypeSlots", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bde5556b-562d-431f-9ff9-d31a5f5cb8c5"),
                            Color = "#ff69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9693),
                            Icon = "",
                            Name = "Visio"
                        },
                        new
                        {
                            Id = new Guid("4a5eaf2f-0496-4035-a4b7-9210da39501c"),
                            Color = "#fa69b4",
                            CreatedAt = new DateTime(2025, 10, 17, 14, 36, 17, 855, DateTimeKind.Utc).AddTicks(9697),
                            Icon = "",
                            Name = "Présentiel"
                        });
                });

            modelBuilder.Entity("MainBoilerPlate.Models.UserApp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("DataProcessingConsent")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("PrivacyPolicyConsent")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("StatusId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleAppId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserAppId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleAppId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserAppId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UsersXLanguages", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LanguageId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersXLanguages");
                });

            modelBuilder.Entity("UsersXProgrammingLanguages", b =>
                {
                    b.Property<Guid>("ProgrammingLanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ProgrammingLanguageId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersXProgrammingLanguages");
                });

            modelBuilder.Entity("CursusXCategories", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.CategoryCursus", null)
                        .WithMany()
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MainBoilerPlate.Models.Cursus", null)
                        .WithMany()
                        .HasForeignKey("CursusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Address", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.UserApp", "User")
                        .WithMany("Adresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Booking", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.Order", "Order")
                        .WithMany("Bookings")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MainBoilerPlate.Models.Slot", "Slot")
                        .WithOne()
                        .HasForeignKey("MainBoilerPlate.Models.Booking", "SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MainBoilerPlate.Models.UserApp", "Student")
                        .WithMany("BookingsForStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Slot");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Cursus", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.LevelCursus", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MainBoilerPlate.Models.UserApp", "Teacher")
                        .WithMany("TeacherCursuses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Experience", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.UserApp", "User")
                        .WithMany("Experiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Formation", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.UserApp", "User")
                        .WithMany("Formations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Order", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.UserApp", "Student")
                        .WithMany("OrdersForStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MainBoilerPlate.Models.RefreshToken", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.UserApp", "User")
                        .WithOne()
                        .HasForeignKey("MainBoilerPlate.Models.RefreshToken", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Slot", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.UserApp", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MainBoilerPlate.Models.TypeSlot", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MainBoilerPlate.Models.UserApp", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MainBoilerPlate.Models.StatusAccount", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.RoleApp", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.RoleApp", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleAppId");

                    b.HasOne("MainBoilerPlate.Models.RoleApp", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MainBoilerPlate.Models.UserApp", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserAppId");

                    b.HasOne("MainBoilerPlate.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersXLanguages", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MainBoilerPlate.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersXProgrammingLanguages", b =>
                {
                    b.HasOne("MainBoilerPlate.Models.ProgrammingLanguage", null)
                        .WithMany()
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MainBoilerPlate.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MainBoilerPlate.Models.Order", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("MainBoilerPlate.Models.RoleApp", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MainBoilerPlate.Models.UserApp", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("BookingsForStudent");

                    b.Navigation("Experiences");

                    b.Navigation("Formations");

                    b.Navigation("OrdersForStudent");

                    b.Navigation("TeacherCursuses");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
